async function fetchProducts() {
    const contractAddress = '0xCD4c773a5BA577075A3758499F22E5fBD55fDC6A';
    const contractABI = [/*... ABI from the contract above ...*/];
    
    if (typeof window.ethereum !== 'undefined') {
        const web3 = new Web3(window.ethereum);
        await window.ethereum.enable();
        
        const contract = new web3.eth.Contract(contractABI, contractAddress);
        const products = await contract.methods.getCart().call({ from: window.ethereum.selectedAddress });
        
        const productsDiv = document.getElementById('products');
        products.forEach(product => {
            const productDiv = document.createElement('div');
            productDiv.innerHTML = `
                <h2>${product.name}</h2>
                <p>Price: ${web3.utils.fromWei(product.priceInEth, 'ether')} ETH</p>
                <p>Quantity: ${product.quantity}</p>
                <button onclick="addToCart('${product.name}', ${product.priceInEth}, ${product.quantity})">Add to Cart</button>
            `;
            productsDiv.appendChild(productDiv);
        });
    } else {
        alert('MetaMask is not installed');
    }
}

async function addToCart(productName, priceInEth, quantity) {
    const contractAddress = '0xCD4c773a5BA577075A3758499F22E5fBD55fDC6A';
    const contractABI = [/*... ABI from the contract above ...*/];
    
    if (typeof window.ethereum !== 'undefined') {
        const web3 = new Web3(window.ethereum);
        await window.ethereum.enable();
        
        const contract = new web3.eth.Contract(contractABI, contractAddress);
        await contract.methods.addToCart(productName, priceInEth, quantity).send({ from: window.ethereum.selectedAddress });
        alert('Added to cart');
        fetchCart();
    } else {
        alert('MetaMask is not installed');
    }
}

async function fetchCart() {
    const contractAddress = '0xCD4c773a5BA577075A3758499F22E5fBD55fDC6A';
    const contractABI = [/*... ABI from the contract above ...*/];
    
    if (typeof window.ethereum !== 'undefined') {
        const web3 = new Web3(window.ethereum);
        await window.ethereum.enable();
        
        const contract = new web3.eth.Contract(contractABI, contractAddress);
        const cart = await contract.methods.getCart().call({ from: window.ethereum.selectedAddress });
        
        const cartDiv = document.getElementById('cart');
        cartDiv.innerHTML = '<h2>Your Cart</h2>';
        cart.forEach(item => {
            const itemDiv = document.createElement('div');
            itemDiv.innerHTML = `
                <p>${item.name}</p>
                <p>Price: ${web3.utils.fromWei(item.priceInEth, 'ether')} ETH</p>
                <p>Quantity: ${item.quantity}</p>
            `;
            cartDiv.appendChild(itemDiv);
        });
    } else {
        alert('MetaMask is not installed');
    }
}

async function purchase() {
    const contractAddress = '0xCD4c773a5BA577075A3758499F22E5fBD55fDC6A';
    const contractABI = [/*... ABI from the contract above ...*/];
    
    if (typeof window.ethereum !== 'undefined') {
        const web3 = new Web3(window.ethereum);
        await window.ethereum.enable();
        
        const contract = new web3.eth.Contract(contractABI, contractAddress);
        const cart = await contract.methods.getCart().call({ from: window.ethereum.selectedAddress });
        
        let totalAmount = 0;
        cart.forEach(item => {
            totalAmount += item.priceInEth;
        });
        
        await contract.methods.buyKavaPacket().send({ from: window.ethereum.selectedAddress, value: totalAmount });
        alert('Purchase successful');
        fetchCart();
    } else {
        alert('MetaMask is not installed');
    }
}

document.getElementById('connectWallet').addEventListener('click', async () => {
    if (typeof window.ethereum !== 'undefined') {
        await window.ethereum.enable();
        alert('Wallet connected');
    } else {
        alert('MetaMask is not installed');
    }
});

document.getElementById('purchase').addEventListener('click', purchase);

window.onload = fetchProducts;
